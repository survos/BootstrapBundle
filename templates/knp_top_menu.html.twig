{% extends 'knp_menu.html.twig' %}

{% macro setCssClassAttribute(item, type, add) %}
    {% set getter = 'get' ~ type %}
    {% set setter = 'set' ~ type %}
    {% set value = attribute(item, getter, ['class']) %}
    {% if value is iterable %}
        {% set value = value|join(' ') %}
    {% endif %}
    {% do attribute(item, setter, ['class', value ~ ' ' ~ add]) %}
{% endmacro %}

{% block root %}

    {% set listAttributes = item.childrenAttributes %}
    <ul class="{{ item.attributes.class|default(options.rootAttributes.class|default()) }}">
        {{ block('children') -}}
{#        <li class="nav-item">#}
{#            <a class="nav-link active" aria-current="page" href="#">Home</a>#}
{#        </li>#}
{#        <li class="nav-item">#}
{#            <a class="nav-link" href="#">Link</a>#}
{#        </li>#}

{#        {{ block('list') -}}#}
    </ul>
{% endblock %}

{% block item %}
    {% import "knp_menu.html.twig" as macros %}

    {#
    As multiple level is not currently supported by bootstrap 4
    This requires you to install
    https://github.com/bootstrapthemesco/bootstrap-4-multi-dropdown-navbar
    And set the the use_multilevel = true
    #}
    {% set use_multilevel = true %}

    {% set displayed = item.displayed %}
    {# don't display item if no children and it's a dropdown? #}
    {% if item.extras['is_submenu']|default(false) and (item.children|length == 0) %}
        {% set displayed = false %}
    {% endif %}
{#    {% if item.name == 'tags_submenu' %} {{  item.children|length }} {% endif %}#}


    {% if displayed %}
        {%- set attributes = item.attributes|merge(item.linkAttributes) %}
        {%- set extras = item.extras %}
{#        {{ extras|length ? dump(extras) }}#}
{#        {{ dump(item.linkAttributes) }}#}

        {%- set is_dropdown = attributes.dropdown|default(false) %}
        {%- set is_collapsable = item.hasChildren %} {# was attributes.collapsable|default(false) %} #}
        {% if item.attribute('divider_append') is not empty  %}
            {{ block('dividerElement') }}
        {% endif %}

        {%- set divider_prepend = attributes.divider_prepend|default(false) %}
        {%- set divider_append = attributes.divider_append|default(false) %}
        {# unset bootstrap specific attributes #}
        {%- set attributes = attributes|merge({'dropdown': null, 'divider_prepend': null, 'divider_append': null }) %}

        {%- if divider_prepend %}
            {{ block('dividerElement') }}
        {%- endif %}

        {# building the class of the item #}
{#        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class'), 'nav-item'] : ['nav-item'] %}#}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
{#            {%- set classes = classes|merge([options.firstClass]) %}#}
        {%- endif %}
        {%- if item.actsLikeLast %}
{#            {%- set classes = classes|merge([options.lastClass]) %}#}
        {%- endif %}

        {# building the class of the children #}
        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}

        {# adding classes for dropdown/collapse #}
{#        {%- if false and is_dropdown %}#}
{#            {%- set classes = classes|merge(['dropdown']) %}#}
{#            {%- set childrenClasses = childrenClasses|merge(['dropdown-item']) %}#}
{#        {%- endif %}#}

        {%- if is_collapsable %}
            {%- set classes = classes|merge(['dropdown']) %}
            {%- set childrenClasses = childrenClasses|merge(['collapse-item']) %}
        {%- endif %}

        {# putting classes together #}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
        {%- set itemSlug = item.name|u.snake %}

{#        <li class="nav-item">#}
{#            <a class="nav-link" href="#">Link</a>#}
{#        </li>#}

{#        {{ attributes|length ? /attributes) }}#}
        <li{{ macros.attributes(attributes) }}>
            {# displaying the item #}
            {%- if is_dropdown %}
                {{ block('dropdownElement') }}
            {%- elseif is_collapsable %}
                {{ block('collapseElement') }}
            {%- elseif item.uri is not empty and (not item.current or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}

{#            {%- if divider_append %}#}
{#                {{ block('dividerElement') }}#}
{#            {%- endif %}#}

            {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
                {%- if is_dropdown %}
                    {{ block('dropdownlinks') }}
                {% elseif is_collapsable %}
                    {{ block('collapselinks') }}
                {% endif %}
            {% endif %}
        </li>
    {% endif %}
{% endblock %}

{% block dropdownlinks %}
    <{{ use_multilevel ? 'ul' : 'div'}} class="dropdown-menu">

    {% for item in item.children %}
        {{ block('renderDropdownlink') }}
        {% if use_multilevel and item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
            {{ block('dropdownlinks') }}
        {% endif %}
    {% endfor %}
    <{{ use_multilevel ? '/ul' : '/div'}}>
{% endblock %}

{% block collapselinks %}
    {# the collapseELement block references this id, we might need data-parent #}
    {# isAncestor checks if the item is an ancestor of the currentItem #}
{#    <div id="collapse_{{itemSlug}}" class="{{ matcher.isAncestor(item) ? 'show' : 'collapse' }}">#}
        <{{ use_multilevel ? 'ul' : 'div'}} class="dropdown-menu" aria-labelledby="collapse_{{itemSlug}}">
    {% for item in item.children %}
            {{ block('renderDropdownlink') }}
    {% endfor %}
        <{{ use_multilevel ? '/ul' : '/div'}}>
{#    </div>#}
{% endblock %}

{% block renderDropdownlink %}
    {% import _self as ownmacro %}
    {%- set divider_prepend = item.attributes.divider_prepend|default(false) %}
    {%- set divider_append = item.attributes.divider_append|default(false) %}
    {%- set attributes = item.attributes|merge({'dropdown': null, 'divider_prepend': null, 'divider_append': null }) %}

    {% if use_multilevel %}
        <li >
    {% endif %}

    {%- if divider_prepend %}
        {{ block('dividerElementDropdown') }}
    {%- endif %}

    {%- if item.uri is not empty %} {#  and (not item.current or options.currentAsLink) #}
        {# collapse?
        {{ ownmacro.setCssClassAttribute(item, 'LinkAttribute', 'dropdown-item') }}
        #}
        {{ block('linkElement') }}
    {%- else %}
        {{ block('spanElementDropdown') }}
    {%- endif %}

    {%- if divider_append %}
        {{ block('dividerElementDropdown') }}
    {%- endif %}

    {% if use_multilevel %}
        </li>
    {% endif %}
{% endblock %}

{% block spanElementDropdown %}
    {% import "knp_menu.html.twig" as macros %}
    {% import _self as ownmacro %}
    {{ ownmacro.setCssClassAttribute(item, 'LabelAttribute', 'dropdown-header') }}
    <div {{ macros.attributes(item.labelAttributes) }}>
        {% if item.attribute('icon') is not empty  %}
            <i class="{{ item.attribute('icon') }}">   </i>
            {{ item.attribute('icon')  }}
        {% endif %}
        {{ block('label') }}
    </div>
{% endblock %}

{% block dividerElementDropdown %}
    <div class="dropdown-divider"></div>
{% endblock %}

{% block dividerElement %}

    {% if item.level == 1 %}
{#        <li class="divider-vertical"></li>#}
        <li class="nav-item py-2 py-lg-1 col-12 col-lg-auto">
            <div class="vr d-none d-lg-flex h-100 mx-lg-2 text-white"></div>
            <hr class="d-lg-none my-2 text-white-50">
        </li>
    {% else %}
        <li class="divider"></li>
    {% endif %}
{% endblock %}

{# {% block linkElement %}
    {% import _self as knp_menu %}
    <a class="nav-link" href="{{ item.uri }}"{{ knp_menu.attributes(item.linkAttributes) }}>
        {{ block('label') }}
    </a>
{% endblock %}
{% block spanElement %}
    {% import _self as selfMacros %}
    {% import "knp_menu.html.twig" as macros %}
    {% if item.attribute('class') matches '/(^|\s+)header(\s+|$)/' %}
        {{ selfMacros.badges(item) }}
    {% else %}
        <a{{ macros.attributes(item.labelAttributes) }}>
            {{ selfMacros.badges(item) }}
        </a>
    {% endif %}
{% endblock %}

 #}
{% block linkElement %}
    {% import "knp_menu.html.twig" as macros %}
    {% import _self as ownmacro %}
    {{ ownmacro.setCssClassAttribute(item, 'LinkAttribute', 'nav-link depth-' ~ item.level ) }}
{#    {{ ownmacro.setCssClassAttribute(item, 'LinkAttribute', 'dropdown-item', ' depth-' ~ item.level ) }}#}

    {%- set attributes = item.linkAttributes %}
    {% if matcher.isCurrent(item) %}
        {%- set classes = classes|merge([options.currentClass]) %}
        {% set attributes = attributes|merge({ 'class': attributes.class|join(' ') ~ ' ' ~ options.currentClass} ) %}
    {% endif %}


    <a href="{{ item.uri }}"{{ macros.attributes(attributes) }}>
        {% if item.attribute('icon') is not empty  %}
            <i class="{{ item.attribute('icon') }}"></i>
        {% endif %}
            {{ block('label') }}
    </a>
{% endblock %}

{% block spanElement %}
    {% import "knp_menu.html.twig" as macros %}
    {% import _self as ownmacro %}
    {{ matcher.isCurrent(item) ? 'current Span is ' ~ item.label }}

    {{ ownmacro.setCssClassAttribute(item, 'LabelAttribute', 'navbar-text nav-linkxx') }}
    <span {{ macros.attributes(item.labelAttributes) }}>
        {% if item.attribute('icon') is not empty  %}
            <i class="{{ item.attribute('icon') }}"></i>
        {% endif %}
        {{ block('label') }}
	</span>
{% endblock %}

{#{% block dropdownElement %}#}
{#    'dropdownElement'#}
{#    {% import "knp_menu.html.twig" as macros %}#}
{#    {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}#}
{#    {%- set classes = classes|merge([' dropdown-toggle', 'nav-linkx']) %}#}
{#    {%- set attributes = item.linkAttributes %}#}
{#    {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}#}
{#    {%- set attributes = attributes|merge({'data-bs-toggle': 'dropdown'}) %}#}
{#    {%- set attributes = attributes|merge({'role': 'button'}) %}#}
{#    <a href="#"{{ macros.attributes(attributes) }}>#}
{#        {% if item.attribute('icon') is not empty  %}#}
{#            <i class="{{ item.attribute('icon') }}"></i>#}
{#        {% endif %}#}
{#        {{ block('label') }}#}
{#        <b class="caret"></b>#}
{#    </a>#}
{#{% endblock %}#}

{# this is the root link of something that can be collapsed #}
{% block collapseElement %}
    {% import "knp_menu.html.twig" as macros %}
    {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}

    {# nav-link kills buttons, so we need to explicitly set it in the caller #}

    {%- set classes = classes|merge(['dropdown-toggle']) %}
    {%- set classes = classes|merge([item.extras['btn']|default('nav-link')]) %}

    {% if  matcher.isCurrent(item)%}
        {%- set classes = classes|merge(['selected-menu', 'nav-link ']) %}
    {% endif %}
    {%- set attributes = item.linkAttributes %}
    {%- set attributes = attributes|merge({'class': classes|join(' dropdown-toggle ')}) %}
    {%- set attributes = attributes|merge({'data-bs-toggle': 'dropdown'}) %}
    {%- set attributes = attributes|merge({'aria-expanded': 'false'}) %}
    {%- set attributes = attributes|merge({'role': 'button'}) %}
    <a {{ macros.attributes(attributes) }}
            href="#" id="collapse_{{itemSlug}}"
    >
        {% if item.attribute('icon') is not empty  %}
            <i class="{{ item.attribute('icon') }}"></i>
        {% endif %}
        {{ block('label') }}
{#        <b class="caret"></b>#}
    </a>
{% endblock %}

{% block label %}
    {# link and span call the icon...
    {% if item.labelAttribute('icon') %}<i class="nav-icon {{ item.labelAttribute('icon') }}"></i>{% endif %}
    #}
        {% if not item.labelAttribute('iconOnly') %}
{#            {{ item.name == 'copyright' ? dump(item, options) }}#}
{#            and item.getExtra('safe_label', false)#}
            {% set domain = item.extra('translation_domain','routing') %}
            {% set label = item.label|trans(domain=domain) %}
            {% if options.allow_safe_labels %}{{ label|raw }}{% else %}{{ label }}{% endif %}

        {% endif %}
        {% if item.labelAttribute('data-image') %}<img src="{{ item.labelAttribute('data-image') }}" alt="{{ item.name }}" class="menu-thumbnail"/>{% endif %}

        {% import _self as selfMacros %}
        {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
{#            <span class="float-right">#}
{#            {{ selfMacros.badges(item) }}#}
{#            <i class="fas fa-angle-left float-right"></i>#}
{#        </span>#}
        {% else %}
            {{ selfMacros.badges(item) }}
        {% endif %}
{% endblock %}

{% macro badges(item) %}
    {% import _self as selfMacros %}
    {% if item.getExtra('badge') is not null %}
        {{ selfMacros.badge(item.getExtra('badge')) }}
    {% elseif item.getExtra('badges') is not null %}
        {% for badge in item.getExtra('badges') %}
            {{ selfMacros.badge(badge) }}
        {% endfor %}
    {% endif %}
{% endmacro %}

{% macro badge(badge) %}
    <span class="right badge badge-{{ badge.color|default('success') }}">{{ badge.value }}</span>
{% endmacro %}

{% block list %}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {% import "knp_menu.html.twig" as macros %}

        {% if matcher.isAncestor(item) %}
            {%- set listAttributes = listAttributes|merge({class: (listAttributes.class|default(''))|trim}) -%}
        {% endif %}
        {% if not item.isRoot %}
            {%- set listAttributes = listAttributes|merge({class: (listAttributes.class|default('') ~ ' xxxnav-treeview')|trim}) -%}
        {% endif %}
        <ul{{ macros.attributes(listAttributes) }}>
            {{ block('children') }}
        </ul>
    {% endif %}
{% endblock %}

{% block children %}
    {# save current variables #}
    {% set currentOptions = options %}
    {% set currentItem = item %}
    {# update the depth for children #}
    {% if options.depth is not none %}
{#        {% set options = options|merge({'depth': currentOptions.depth - 1}) %}#}
    {% endif %}
    {# update the matchingDepth for children #}
    {% if options.matchingDepth is not none and options.matchingDepth > 0 %}
        {% set options = options|merge({'matchingDepth': currentOptions.matchingDepth - 1}) %}
    {% endif %}


    {# building the class of the children #}
    {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
    {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}

    {% for item in currentItem.children %}
{#        {{ item.extras.is_submenu|default(false) ? dump(item) }}#}
        {%- if is_collapsable|default(true) %}
            {% set classes = [] %}
{#            {%- set classes = item.attribute('class') is not empty ? [item.attribute('class'), 'nav-item'] : ['nav-item'] %}#}
{#            {%- set classes = classes|merge([ 'show']) %}#}
            {%- set childrenClasses = childrenClasses|merge(['collapse-item']) %}
        {%- endif %}
        {{ block('item') }}
    {% endfor %}
    {# restore current variables #}
    {% set item = currentItem %}
    {% set options = currentOptions %}
{% endblock %}


{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not same as(false) -%}
            {{- ' %s="%s"'|format(name, value is same as(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

